// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubeconfig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-kubeconfig/sdk/go/kubeconfig/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EksKubeConfig struct {
	pulumi.CustomResourceState

	// Base64 encoded certificate data required to communicate with your cluster.
	CertificateData pulumi.StringOutput `pulumi:"certificateData"`
	// Endpoint for your Kubernetes API server.
	ClusterEndpoint pulumi.StringOutput `pulumi:"clusterEndpoint"`
	// Name of the EKS cluster you want to generate the kubeconfig for
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Generated Kubeconfig for working with your EKS cluster
	Kubeconfig pulumi.StringOutput    `pulumi:"kubeconfig"`
	Region     pulumi.StringPtrOutput `pulumi:"region"`
	// Role arn that you want the kubeconfig to use. Optional
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
}

// NewEksKubeConfig registers a new resource with the given unique name, arguments, and options.
func NewEksKubeConfig(ctx *pulumi.Context,
	name string, args *EksKubeConfigArgs, opts ...pulumi.ResourceOption) (*EksKubeConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'ClusterEndpoint'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"kubeconfig",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EksKubeConfig
	err := ctx.RegisterResource("kubeconfig:index:EksKubeConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEksKubeConfig gets an existing EksKubeConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEksKubeConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EksKubeConfigState, opts ...pulumi.ResourceOption) (*EksKubeConfig, error) {
	var resource EksKubeConfig
	err := ctx.ReadResource("kubeconfig:index:EksKubeConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EksKubeConfig resources.
type eksKubeConfigState struct {
}

type EksKubeConfigState struct {
}

func (EksKubeConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*eksKubeConfigState)(nil)).Elem()
}

type eksKubeConfigArgs struct {
	// Base64 encoded certificate data required to communicate with your cluster.
	CertificateData *string `pulumi:"certificateData"`
	// Endpoint for your Kubernetes API server.
	ClusterEndpoint string `pulumi:"clusterEndpoint"`
	// Name of the EKS cluster you want to generate the kubeconfig for
	ClusterName string `pulumi:"clusterName"`
	// Region that the EKS cluster is in. Optional
	Region *string `pulumi:"region"`
	// Role arn that you want the kubeconfig to use. Optional
	RoleArn *string `pulumi:"roleArn"`
}

// The set of arguments for constructing a EksKubeConfig resource.
type EksKubeConfigArgs struct {
	// Base64 encoded certificate data required to communicate with your cluster.
	CertificateData pulumi.StringPtrInput
	// Endpoint for your Kubernetes API server.
	ClusterEndpoint pulumi.StringInput
	// Name of the EKS cluster you want to generate the kubeconfig for
	ClusterName pulumi.StringInput
	// Region that the EKS cluster is in. Optional
	Region pulumi.StringPtrInput
	// Role arn that you want the kubeconfig to use. Optional
	RoleArn pulumi.StringPtrInput
}

func (EksKubeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eksKubeConfigArgs)(nil)).Elem()
}

type EksKubeConfigInput interface {
	pulumi.Input

	ToEksKubeConfigOutput() EksKubeConfigOutput
	ToEksKubeConfigOutputWithContext(ctx context.Context) EksKubeConfigOutput
}

func (*EksKubeConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**EksKubeConfig)(nil)).Elem()
}

func (i *EksKubeConfig) ToEksKubeConfigOutput() EksKubeConfigOutput {
	return i.ToEksKubeConfigOutputWithContext(context.Background())
}

func (i *EksKubeConfig) ToEksKubeConfigOutputWithContext(ctx context.Context) EksKubeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EksKubeConfigOutput)
}

type EksKubeConfigOutput struct{ *pulumi.OutputState }

func (EksKubeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EksKubeConfig)(nil)).Elem()
}

func (o EksKubeConfigOutput) ToEksKubeConfigOutput() EksKubeConfigOutput {
	return o
}

func (o EksKubeConfigOutput) ToEksKubeConfigOutputWithContext(ctx context.Context) EksKubeConfigOutput {
	return o
}

// Base64 encoded certificate data required to communicate with your cluster.
func (o EksKubeConfigOutput) CertificateData() pulumi.StringOutput {
	return o.ApplyT(func(v *EksKubeConfig) pulumi.StringOutput { return v.CertificateData }).(pulumi.StringOutput)
}

// Endpoint for your Kubernetes API server.
func (o EksKubeConfigOutput) ClusterEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *EksKubeConfig) pulumi.StringOutput { return v.ClusterEndpoint }).(pulumi.StringOutput)
}

// Name of the EKS cluster you want to generate the kubeconfig for
func (o EksKubeConfigOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *EksKubeConfig) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Generated Kubeconfig for working with your EKS cluster
func (o EksKubeConfigOutput) Kubeconfig() pulumi.StringOutput {
	return o.ApplyT(func(v *EksKubeConfig) pulumi.StringOutput { return v.Kubeconfig }).(pulumi.StringOutput)
}

func (o EksKubeConfigOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EksKubeConfig) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Role arn that you want the kubeconfig to use. Optional
func (o EksKubeConfigOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EksKubeConfig) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EksKubeConfigInput)(nil)).Elem(), &EksKubeConfig{})
	pulumi.RegisterOutputType(EksKubeConfigOutput{})
}
