// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubeconfig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-kubeconfig/sdk/go/kubeconfig/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GkeKubeConfig struct {
	pulumi.CustomResourceState

	CertificateData pulumi.StringPtrOutput `pulumi:"certificateData"`
	ClusterEndpoint pulumi.StringOutput    `pulumi:"clusterEndpoint"`
	ClusterName     pulumi.StringOutput    `pulumi:"clusterName"`
	// Generated Kubeconfig for working with your GKE cluster
	Kubeconfig pulumi.StringOutput `pulumi:"kubeconfig"`
}

// NewGkeKubeConfig registers a new resource with the given unique name, arguments, and options.
func NewGkeKubeConfig(ctx *pulumi.Context,
	name string, args *GkeKubeConfigArgs, opts ...pulumi.ResourceOption) (*GkeKubeConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateData == nil {
		return nil, errors.New("invalid value for required argument 'CertificateData'")
	}
	if args.ClusterEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'ClusterEndpoint'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"kubeconfig",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GkeKubeConfig
	err := ctx.RegisterResource("kubeconfig:index:GkeKubeConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGkeKubeConfig gets an existing GkeKubeConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGkeKubeConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GkeKubeConfigState, opts ...pulumi.ResourceOption) (*GkeKubeConfig, error) {
	var resource GkeKubeConfig
	err := ctx.ReadResource("kubeconfig:index:GkeKubeConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GkeKubeConfig resources.
type gkeKubeConfigState struct {
}

type GkeKubeConfigState struct {
}

func (GkeKubeConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeKubeConfigState)(nil)).Elem()
}

type gkeKubeConfigArgs struct {
	// Base64 encoded certificate data required to communicate with your cluster.
	CertificateData string `pulumi:"certificateData"`
	// Endpoint for your Kubernetes API server.
	ClusterEndpoint string `pulumi:"clusterEndpoint"`
	// Name of the GKE cluster you want to generate the kubeconfig for
	ClusterName string `pulumi:"clusterName"`
	Project     string `pulumi:"project"`
	Zone        string `pulumi:"zone"`
}

// The set of arguments for constructing a GkeKubeConfig resource.
type GkeKubeConfigArgs struct {
	// Base64 encoded certificate data required to communicate with your cluster.
	CertificateData pulumi.StringInput
	// Endpoint for your Kubernetes API server.
	ClusterEndpoint pulumi.StringInput
	// Name of the GKE cluster you want to generate the kubeconfig for
	ClusterName pulumi.StringInput
	Project     pulumi.StringInput
	Zone        pulumi.StringInput
}

func (GkeKubeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeKubeConfigArgs)(nil)).Elem()
}

type GkeKubeConfigInput interface {
	pulumi.Input

	ToGkeKubeConfigOutput() GkeKubeConfigOutput
	ToGkeKubeConfigOutputWithContext(ctx context.Context) GkeKubeConfigOutput
}

func (*GkeKubeConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeKubeConfig)(nil)).Elem()
}

func (i *GkeKubeConfig) ToGkeKubeConfigOutput() GkeKubeConfigOutput {
	return i.ToGkeKubeConfigOutputWithContext(context.Background())
}

func (i *GkeKubeConfig) ToGkeKubeConfigOutputWithContext(ctx context.Context) GkeKubeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeKubeConfigOutput)
}

type GkeKubeConfigOutput struct{ *pulumi.OutputState }

func (GkeKubeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeKubeConfig)(nil)).Elem()
}

func (o GkeKubeConfigOutput) ToGkeKubeConfigOutput() GkeKubeConfigOutput {
	return o
}

func (o GkeKubeConfigOutput) ToGkeKubeConfigOutputWithContext(ctx context.Context) GkeKubeConfigOutput {
	return o
}

func (o GkeKubeConfigOutput) CertificateData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GkeKubeConfig) pulumi.StringPtrOutput { return v.CertificateData }).(pulumi.StringPtrOutput)
}

func (o GkeKubeConfigOutput) ClusterEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeKubeConfig) pulumi.StringOutput { return v.ClusterEndpoint }).(pulumi.StringOutput)
}

func (o GkeKubeConfigOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeKubeConfig) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Generated Kubeconfig for working with your GKE cluster
func (o GkeKubeConfigOutput) Kubeconfig() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeKubeConfig) pulumi.StringOutput { return v.Kubeconfig }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GkeKubeConfigInput)(nil)).Elem(), &GkeKubeConfig{})
	pulumi.RegisterOutputType(GkeKubeConfigOutput{})
}
