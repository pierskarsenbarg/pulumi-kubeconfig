// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubeconfig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-kubeconfig/sdk/go/kubeconfig/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type AksKubeConfig struct {
	pulumi.ResourceState

	// Kubeconfig returned from AKS cluster
	Kubeconfig pulumix.Output[string] `pulumi:"kubeconfig"`
}

// NewAksKubeConfig registers a new resource with the given unique name, arguments, and options.
func NewAksKubeConfig(ctx *pulumi.Context,
	name string, args *AksKubeConfigArgs, opts ...pulumi.ResourceOption) (*AksKubeConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AksKubeConfig
	err := ctx.RegisterRemoteComponentResource("kubeconfig:index:AksKubeConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type aksKubeConfigArgs struct {
	// Name of the AKS cluster you want the Kubeconfig from.
	ClusterName string `pulumi:"clusterName"`
	// Specify whether you want to retrieve the admin kubeconfig or the user kubeconfig. Default value is false
	IsAdmin *bool `pulumi:"isAdmin"`
	// Name of the resource group that the cluster is part of.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a AksKubeConfig resource.
type AksKubeConfigArgs struct {
	// Name of the AKS cluster you want the Kubeconfig from.
	ClusterName pulumix.Input[string]
	// Specify whether you want to retrieve the admin kubeconfig or the user kubeconfig. Default value is false
	IsAdmin pulumix.Input[*bool]
	// Name of the resource group that the cluster is part of.
	ResourceGroupName pulumix.Input[string]
}

func (AksKubeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aksKubeConfigArgs)(nil)).Elem()
}

type AksKubeConfigOutput struct{ *pulumi.OutputState }

func (AksKubeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AksKubeConfig)(nil)).Elem()
}

func (o AksKubeConfigOutput) ToAksKubeConfigOutput() AksKubeConfigOutput {
	return o
}

func (o AksKubeConfigOutput) ToAksKubeConfigOutputWithContext(ctx context.Context) AksKubeConfigOutput {
	return o
}

func (o AksKubeConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AksKubeConfig] {
	return pulumix.Output[AksKubeConfig]{
		OutputState: o.OutputState,
	}
}

// Kubeconfig returned from AKS cluster
func (o AksKubeConfigOutput) Kubeconfig() pulumix.Output[string] {
	value := pulumix.Apply[AksKubeConfig](o, func(v AksKubeConfig) pulumix.Output[string] { return v.Kubeconfig })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(AksKubeConfigOutput{})
}
