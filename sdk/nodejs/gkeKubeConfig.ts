// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GkeKubeConfig extends pulumi.CustomResource {
    /**
     * Get an existing GkeKubeConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GkeKubeConfig {
        return new GkeKubeConfig(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kubeconfig:index:GkeKubeConfig';

    /**
     * Returns true if the given object is an instance of GkeKubeConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GkeKubeConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GkeKubeConfig.__pulumiType;
    }

    public readonly certificateData!: pulumi.Output<string | undefined>;
    public readonly clusterEndpoint!: pulumi.Output<string>;
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Generated Kubeconfig for working with your GKE cluster
     */
    public /*out*/ readonly kubeconfig!: pulumi.Output<string>;

    /**
     * Create a GkeKubeConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GkeKubeConfigArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.certificateData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateData'");
            }
            if ((!args || args.clusterEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterEndpoint'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["certificateData"] = args ? args.certificateData : undefined;
            resourceInputs["clusterEndpoint"] = args ? args.clusterEndpoint : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["kubeconfig"] = undefined /*out*/;
        } else {
            resourceInputs["certificateData"] = undefined /*out*/;
            resourceInputs["clusterEndpoint"] = undefined /*out*/;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["kubeconfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kubeconfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GkeKubeConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a GkeKubeConfig resource.
 */
export interface GkeKubeConfigArgs {
    /**
     * Base64 encoded certificate data required to communicate with your cluster.
     */
    certificateData: pulumi.Input<string>;
    /**
     * Endpoint for your Kubernetes API server.
     */
    clusterEndpoint: pulumi.Input<string>;
    /**
     * Name of the GKE cluster you want to generate the kubeconfig for
     */
    clusterName: pulumi.Input<string>;
    project: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}
