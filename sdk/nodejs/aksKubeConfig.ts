// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AksKubeConfig extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'kubeconfig:index:AksKubeConfig';

    /**
     * Returns true if the given object is an instance of AksKubeConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AksKubeConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AksKubeConfig.__pulumiType;
    }

    /**
     * Kubeconfig returned from AKS cluster
     */
    public /*out*/ readonly kubeconfig!: pulumi.Output<string>;

    /**
     * Create a AksKubeConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AksKubeConfigArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["isAdmin"] = args ? args.isAdmin : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["kubeconfig"] = undefined /*out*/;
        } else {
            resourceInputs["kubeconfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AksKubeConfig.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a AksKubeConfig resource.
 */
export interface AksKubeConfigArgs {
    /**
     * Name of the AKS cluster you want the Kubeconfig from.
     */
    clusterName: pulumi.Input<string>;
    /**
     * Specify whether you want to retrieve the admin kubeconfig or the user kubeconfig. Default value is false
     */
    isAdmin?: pulumi.Input<boolean>;
    /**
     * Name of the resource group that the cluster is part of.
     */
    resourceGroupName: pulumi.Input<string>;
}
